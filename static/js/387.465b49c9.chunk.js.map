{"version":3,"file":"static/js/387.465b49c9.chunk.js","mappings":"4OAEaA,EAAMC,EAAAA,GAAAA,IAAH,qFAMHC,EAAKD,EAAAA,GAAAA,GAAH,0FAMFE,EAAQF,EAAAA,GAAAA,EAAH,wFAMLG,EAAYH,EAAAA,GAAAA,EAAH,iE,2BC0BtB,EAxCa,WAEX,OAAwBI,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACMC,GAAUC,EAAAA,EAAAA,MAAYC,GAS5B,OAPAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBAGvB,OAFAC,EAAAA,EAAAA,IAAQN,EAASD,EAASK,GAEnB,kBAAMA,EAAWG,OAAjB,CACR,GAAE,CAACP,KAGF,8BACmB,IAAhBF,EAAKU,QACJ,wBACGV,EAAKW,KAAI,SAAAC,GAAK,OACb,UAAChB,EAAD,YACE,SAACF,EAAD,CACEmB,IACED,EAAME,aAAN,yCACsCF,EAAME,cACxCC,EAENC,IAAI,iBAEN,4BACE,SAACnB,EAAD,UAAQe,EAAMK,QACd,UAACnB,EAAD,yBAAuBc,EAAMM,kBAXxBN,EAAMR,GADF,OAkBjB,oEAIP,C,mKC1CKe,EAAU,mCAChBC,EAAAA,GAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAkB,SAACC,EAAShB,GACvCc,EAAAA,GAAAA,IAAA,qCACqCD,GAAW,CAAEI,OAAQjB,EAAWiB,SAClEC,MAAK,SAAAC,GAEJH,EAAQG,EAASC,KAAKC,QACvB,IACAC,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,EAAhB,GACX,EAEYG,EAAkB,SAACC,EAASX,EAAShB,GAChDc,EAAAA,GAAAA,IAAA,6BAC6Ba,EAD7B,oBACgDd,GAAW,CAAEI,OAAQjB,EAAWiB,SAC7EC,MAAK,SAAAC,GAEJH,EAAQG,EAASC,KAAKC,QACvB,IACAC,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,EAAhB,GACX,EAEYK,EAAkB,SAAC9B,EAAIkB,EAASa,EAAW7B,GACtDc,EAAAA,GAAAA,IAAA,gBACgBhB,EADhB,oBAC8Be,GAAW,CAAEI,OAAQjB,EAAWiB,SAC3DC,MAAK,SAAAC,GAEJH,EAAQG,EAASC,MACjB,IAAIU,EAAY,GAChBX,EAASC,KAAKW,OAAO1B,KAAI,SAAA2B,GAAK,OAAIF,EAAUG,KAAKD,EAAMrB,KAAzB,IAC9BkB,EAAUC,EACX,IACAR,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,EAAhB,GACX,EAEYrB,EAAU,SAACJ,EAAIkB,EAAShB,GACnCc,EAAAA,GAAAA,IAAA,gBACgBhB,EADhB,4BACsCe,GAAW,CAAEI,OAAQjB,EAAWiB,SACnEC,MAAK,SAAAC,GAE8B,IAA9BA,EAASC,KAAK1B,KAAKU,QAGvBY,EAAQG,EAASC,KAAK1B,KACvB,IACA4B,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,EAAhB,GACX,EAEYW,EAAa,SAACpC,EAAIkB,EAAShB,GACtCc,EAAAA,GAAAA,IAAA,gBACgBhB,EADhB,4BACsCe,GAAW,CAAEI,OAAQjB,EAAWiB,SACnEC,MAAK,SAAAC,GAEgC,IAAhCA,EAASC,KAAKe,eAGlBnB,EAAQG,EAASC,KAAKC,QACvB,IACAC,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,EAAhB,GACX,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/requests.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Img = styled.img`\n  max-width: 100px;\n  height: 100%;\n  margin-right: 20px;\n`;\n\nexport const Li = styled.li`\n  display: flex;\n  margin-bottom: 10px;\n  align-items: center;\n`;\n\nexport const Actor = styled.p`\n  font-weight: 700;\n  font-size: 22px;\n  margin-bottom: 5px;\n`;\n\nexport const Character = styled.p`\n  font-size: 18px;\n  font-weight: 500;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Actor, Character, Img, Li } from './Cast.styled';\nimport defaulProfileImg from '../../images/default.profile.png';\nimport { getCast } from 'components/requests';\n\nconst Cast = () => {\n  //   console.log('CAST');\n  const [cast, setCast] = useState([]);\n  const movieId = useParams().id;\n\n  useEffect(() => {\n    const controller = new AbortController();\n    getCast(movieId, setCast, controller);\n\n    return () => controller.abort();\n  }, [movieId]);\n\n  return (\n    <>\n      {cast.length !== 0 ? (\n        <ul>\n          {cast.map(actor => (\n            <Li key={actor.id}>\n              <Img\n                src={\n                  actor.profile_path\n                    ? `https://image.tmdb.org/t/p/w500${actor.profile_path}`\n                    : defaulProfileImg\n                }\n                alt=\"profile img\"\n              />\n              <div>\n                <Actor>{actor.name}</Actor>\n                <Character>Character: {actor.character}</Character>\n              </div>\n            </Li>\n          ))}\n        </ul>\n      ) : (\n        <p>We don't have cast list for this movie.</p>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = 'babda8599831afaa2c30cb95eedbc1fe';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const getTrendingList = (setData, controller) => {\n  axios\n    .get(`trending/movie/day?api_key=${API_KEY}`, { signal: controller.signal })\n    .then(response => {\n      //   console.log(response);\n      setData(response.data.results);\n    })\n    .catch(e => console.log(e));\n};\n\nexport const getSearchedList = (request, setData, controller) => {\n  axios\n    .get(`search/movie?query=${request}&api_key=${API_KEY}`, { signal: controller.signal })\n    .then(response => {\n      //   console.log(response);\n      setData(response.data.results);\n    })\n    .catch(e => console.log(e));\n};\n\nexport const getMovieDetails = (id, setData, setGenres, controller) => {\n  axios\n    .get(`movie/${id}?api_key=${API_KEY}`, { signal: controller.signal })\n    .then(response => {\n      //   console.log(response);\n      setData(response.data);\n      let genreList = [];\n      response.data.genres.map(genre => genreList.push(genre.name));\n      setGenres(genreList);\n    })\n    .catch(e => console.log(e));\n};\n\nexport const getCast = (id, setData, controller) => {\n  axios\n    .get(`movie/${id}/credits?api_key=${API_KEY}`, { signal: controller.signal })\n    .then(response => {\n      //   console.log(response);\n      if (response.data.cast.length === 0) {\n        return;\n      }\n      setData(response.data.cast);\n    })\n    .catch(e => console.log(e));\n};\n\nexport const getReviews = (id, setData, controller) => {\n  axios\n    .get(`movie/${id}/reviews?api_key=${API_KEY}`, { signal: controller.signal })\n    .then(response => {\n      //   console.log(response);\n      if (response.data.total_results === 0) {\n        return;\n      }\n      setData(response.data.results);\n    })\n    .catch(e => console.log(e));\n};\n"],"names":["Img","styled","Li","Actor","Character","useState","cast","setCast","movieId","useParams","id","useEffect","controller","AbortController","getCast","abort","length","map","actor","src","profile_path","defaulProfileImg","alt","name","character","API_KEY","axios","getTrendingList","setData","signal","then","response","data","results","catch","e","console","log","getSearchedList","request","getMovieDetails","setGenres","genreList","genres","genre","push","getReviews","total_results"],"sourceRoot":""}